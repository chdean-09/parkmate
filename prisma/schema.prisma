// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  REGULAR
  ADMIN
}

model User {
  id             String            @id
  username       String            @unique
  hashedPassword String
  wallet         Float             @default(0)
  role           Role              @default(REGULAR)
  ownedLocations ParkingLocation[]
  occupiedSlots  ParkingSlot[]
  sessions       Session[]
  transactions   Transaction[]

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessions")
}

model ParkingLocation {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  latitude     Float
  longitude    Float
  name         String
  baseRate     Float
  hourlyRate   Float
  parkingSlots ParkingSlot[]
  owner        User          @relation(fields: [ownerId], references: [id])
  ownerId      String

  @@map("parking_locations")
}

model ParkingSlot {
  unique_id    Int             @id @default(autoincrement())
  id           String
  content      String
  x            Int
  y            Int
  occupiedAt   DateTime?
  occupied     Boolean         @default(false)
  location     ParkingLocation @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId   Int
  occupiedUser User?           @relation(fields: [userId], references: [id])
  userId       String?
  Transaction  Transaction[]

  @@map("parking_slots")
}

model Transaction {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  name      String
  amount    Float
  slot      ParkingSlot? @relation(fields: [slotId], references: [unique_id])
  slotId    Int?
  user      User         @relation(fields: [userId], references: [id])
  userId    String

  @@map("transactions")
}
